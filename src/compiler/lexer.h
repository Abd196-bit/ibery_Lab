#ifndef IBERY_LEXER_H
#define IBERY_LEXER_H

#include <stdbool.h>

// Token types
typedef enum {
    // Keywords
    TOKEN_DEF,
    TOKEN_RUN,
    TOKEN_QUANTUM,
    TOKEN_PRINT,
    TOKEN_RETURN,
    TOKEN_HOIST,
    TOKEN_SURGE,
    TOKEN_DOMAIN,
    TOKEN_IMPORT,
    TOKEN_EXPORT,
    TOKEN_ASYNC,
    TOKEN_AWAIT,
    TOKEN_PIPE,
    TOKEN_STREAM,
    TOKEN_CLASS,
    TOKEN_INTERFACE,
    TOKEN_IMPLEMENTS,
    TOKEN_EXTENDS,
    TOKEN_PUBLIC,
    TOKEN_PRIVATE,
    TOKEN_PROTECTED,
    TOKEN_STATIC,
    TOKEN_FINAL,
    TOKEN_ABSTRACT,
    TOKEN_VIRTUAL,
    TOKEN_OVERRIDE,
    TOKEN_NEW,
    TOKEN_THIS,
    TOKEN_SUPER,
    TOKEN_INSTANCEOF,
    TOKEN_TYPEOF,
    TOKEN_DELETE,
    TOKEN_IN,
    TOKEN_OF,
    TOKEN_YIELD,
    TOKEN_GENERATOR,
    TOKEN_TRY,
    TOKEN_CATCH,
    TOKEN_FINALLY,
    TOKEN_THROW,
    TOKEN_RAISE,
    TOKEN_WITH,
    TOKEN_SWITCH,
    TOKEN_CASE,
    TOKEN_DEFAULT,
    TOKEN_BREAK,
    TOKEN_CONTINUE,
    TOKEN_IF,
    TOKEN_ELSE,
    TOKEN_ELIF,
    TOKEN_WHILE,
    TOKEN_DO,
    TOKEN_FOR,
    TOKEN_FOREACH,
    TOKEN_MATCH,
    TOKEN_WHEN,
    TOKEN_WHERE,
    TOKEN_LET,
    TOKEN_CONST,
    TOKEN_VAR,
    TOKEN_TYPE,
    TOKEN_ENUM,
    TOKEN_UNION,
    TOKEN_INTERSECTION,
    TOKEN_NAMESPACE,
    TOKEN_USING,
    TOKEN_AS,
    TOKEN_IS,
    TOKEN_NULL,
    TOKEN_UNDEFINED,
    TOKEN_TRUE,
    TOKEN_FALSE,
    TOKEN_INFINITY,
    TOKEN_NAN,
    
    // Identifiers and literals
    TOKEN_IDENTIFIER,
    TOKEN_NUMBER,
    TOKEN_STRING,
    TOKEN_REGEX,
    TOKEN_TEMPLATE_STRING,
    TOKEN_BIGINT,
    TOKEN_HEX,
    TOKEN_OCTAL,
    TOKEN_BINARY,
    TOKEN_CHAR,
    
    // Operators
    TOKEN_PLUS,
    TOKEN_MINUS,
    TOKEN_MULTIPLY,
    TOKEN_DIVIDE,
    TOKEN_EQUALS,
    TOKEN_PLUS_EQUALS,
    TOKEN_MINUS_EQUALS,
    TOKEN_MULTIPLY_EQUALS,
    TOKEN_DIVIDE_EQUALS,
    TOKEN_POWER,
    TOKEN_MODULO,
    TOKEN_INCREMENT,
    TOKEN_DECREMENT,
    TOKEN_AND,
    TOKEN_OR,
    TOKEN_NOT,
    TOKEN_EQUAL_EQUAL,
    TOKEN_NOT_EQUAL,
    TOKEN_GREATER,
    TOKEN_LESS,
    TOKEN_GREATER_EQUAL,
    TOKEN_LESS_EQUAL,
    TOKEN_BITWISE_AND,
    TOKEN_BITWISE_OR,
    TOKEN_BITWISE_XOR,
    TOKEN_BITWISE_NOT,
    TOKEN_LEFT_SHIFT,
    TOKEN_RIGHT_SHIFT,
    TOKEN_UNSIGNED_RIGHT_SHIFT,
    TOKEN_NULLISH_COALESCING,
    TOKEN_OPTIONAL_CHAINING,
    TOKEN_SPREAD,
    TOKEN_REST,
    TOKEN_PIPE,
    TOKEN_ARROW,
    TOKEN_DOUBLE_ARROW,
    TOKEN_DOUBLE_QUESTION,
    TOKEN_DOUBLE_AMPERSAND,
    TOKEN_DOUBLE_PIPE,
    TOKEN_DOUBLE_DOT,
    TOKEN_TRIPLE_DOT,
    TOKEN_DOUBLE_COLON,
    TOKEN_AT,
    TOKEN_HASH,
    TOKEN_DOLLAR,
    TOKEN_BACKTICK,
    TOKEN_TILDE,
    TOKEN_CARET,
    TOKEN_QUESTION,
    TOKEN_EXCLAMATION,
    TOKEN_PERCENT,
    TOKEN_STAR,
    TOKEN_SLASH,
    TOKEN_BACKSLASH,
    TOKEN_PLUS,
    TOKEN_MINUS,
    TOKEN_EQUALS,
    TOKEN_LESS,
    TOKEN_GREATER,
    TOKEN_COMMA,
    TOKEN_DOT,
    TOKEN_COLON,
    TOKEN_SEMICOLON,
    TOKEN_QUOTE,
    TOKEN_DOUBLE_QUOTE,
    TOKEN_SINGLE_QUOTE,
    TOKEN_LEFT_PAREN,
    TOKEN_RIGHT_PAREN,
    TOKEN_LEFT_BRACE,
    TOKEN_RIGHT_BRACE,
    TOKEN_LEFT_BRACKET,
    TOKEN_RIGHT_BRACKET,
    TOKEN_LEFT_ANGLE,
    TOKEN_RIGHT_ANGLE,
    TOKEN_LEFT_SQUARE,
    TOKEN_RIGHT_SQUARE,
    TOKEN_LEFT_CURLY,
    TOKEN_RIGHT_CURLY,
    TOKEN_LEFT_DOUBLE_ANGLE,
    TOKEN_RIGHT_DOUBLE_ANGLE,
    TOKEN_LEFT_DOUBLE_SQUARE,
    TOKEN_RIGHT_DOUBLE_SQUARE,
    TOKEN_LEFT_DOUBLE_CURLY,
    TOKEN_RIGHT_DOUBLE_CURLY,
    
    // Comments
    TOKEN_COMMENT,
    TOKEN_DOC_COMMENT,
    TOKEN_MULTILINE_COMMENT,
    
    // AI and API Integration
    TOKEN_AI,
    TOKEN_API_KEY,
    TOKEN_OPENAI,
    TOKEN_MODEL,
    TOKEN_PROMPT,
    TOKEN_COMPLETION,
    TOKEN_TEMPERATURE,
    TOKEN_MAX_TOKENS,
    TOKEN_RESPONSE,
    TOKEN_CONTEXT,
    TOKEN_SYSTEM,
    TOKEN_USER,
    TOKEN_ASSISTANT,
    
    // Server and API
    TOKEN_SERVER,
    TOKEN_ROUTE,
    TOKEN_GET,
    TOKEN_POST,
    TOKEN_PUT,
    TOKEN_DELETE,
    TOKEN_PATCH,
    TOKEN_OPTIONS,
    TOKEN_HEAD,
    TOKEN_MIDDLEWARE,
    TOKEN_REQUEST,
    TOKEN_RESPONSE,
    TOKEN_PARAMS,
    TOKEN_QUERY,
    TOKEN_BODY,
    TOKEN_HEADERS,
    TOKEN_COOKIES,
    TOKEN_SESSION,
    TOKEN_AUTH,
    TOKEN_JWT,
    TOKEN_BEARER,
    TOKEN_CORS,
    TOKEN_PORT,
    TOKEN_HOST,
    TOKEN_DATABASE,
    TOKEN_CONNECT,
    TOKEN_DISCONNECT,
    TOKEN_WEBSOCKET,
    TOKEN_SOCKET,
    TOKEN_EMIT,
    TOKEN_ON,
    TOKEN_OFF,
    
    // Styling and UI
    TOKEN_STYLE,
    TOKEN_CSS,
    TOKEN_HTML,
    TOKEN_COMPONENT,
    TOKEN_TEMPLATE,
    TOKEN_LAYOUT,
    TOKEN_VIEW,
    TOKEN_PAGE,
    TOKEN_SECTION,
    TOKEN_DIV,
    TOKEN_SPAN,
    TOKEN_COLOR,
    TOKEN_BACKGROUND,
    TOKEN_FONT,
    TOKEN_SIZE,
    TOKEN_MARGIN,
    TOKEN_PADDING,
    TOKEN_BORDER,
    TOKEN_FLEX,
    TOKEN_GRID,
    TOKEN_ALIGN,
    TOKEN_JUSTIFY,
    TOKEN_WIDTH,
    TOKEN_HEIGHT,
    TOKEN_POSITION,
    TOKEN_ANIMATION,
    TOKEN_TRANSITION,
    TOKEN_MEDIA,
    TOKEN_RESPONSIVE,
    TOKEN_THEME,
    TOKEN_DARK,
    TOKEN_LIGHT,
    
    // AI Lab Integration
    TOKEN_LAB,
    TOKEN_EXPERIMENT,
    TOKEN_DATASET,
    TOKEN_TRAIN,
    TOKEN_TEST,
    TOKEN_VALIDATE,
    TOKEN_METRICS,
    TOKEN_ACCURACY,
    TOKEN_LOSS,
    TOKEN_EPOCH,
    TOKEN_BATCH,
    TOKEN_LEARNING_RATE,
    TOKEN_OPTIMIZER,
    TOKEN_CHECKPOINT,
    TOKEN_SAVE,
    TOKEN_LOAD,
    TOKEN_EXPORT_MODEL,
    TOKEN_IMPORT_MODEL,
    TOKEN_PREDICT,
    TOKEN_INFERENCE,
    
    // End of file
    TOKEN_EOF
} TokenType;

// Token structure
typedef struct {
    TokenType type;
    char* value;
    int line;
    int column;
} Token;

// Lexer structure
typedef struct {
    const char* input;
    int position;
    int line;
    int column;
} Lexer;

// Function declarations
Lexer* create_lexer(const char* input);
void destroy_lexer(Lexer* lexer);
Token* get_next_token(Lexer* lexer);
void destroy_token(Token* token);

#endif // IBERY_LEXER_H 